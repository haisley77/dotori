pipeline {
    agent any

    tools {
        gradle 'gradle'
    }

    environment {
        imageName = "haisley77/dotori-be"
        registryCredential = 'dockerhub_token'
        dockerImage = ''

        releaseServerAccount = 'ubuntu'
        releaseServerUri = 'dotori.online'
    }


    stages {
        stage('Git Clone') {
            steps {
                git branch: 'develop-be',
                    credentialsId: 'github_token',
                    url: 'https://github.com/haisley77/dotori'
            }
        }
        stage('Jar Build') {
            steps {
                dir ('backend') {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean bootJar'
                }
            }
        }
        stage('Image Build & DockerHub Push') {
            steps {
                dir('backend') {
                    script {
                        docker.withRegistry('', registryCredential) {
                            // 이미지 빌드
                            sh "docker build -t $imageName:$BUILD_NUMBER ."
                            sh "docker build -t $imageName:latest ."

                            // Docker Hub에 푸시
                            sh "docker push $imageName:$BUILD_NUMBER"
                            sh "docker push $imageName:latest"

                            // 이미지 삭제
                            sh "docker rmi $imageName:$BUILD_NUMBER"
                        }
                    }
                }
            }
        }

        stage('DockerHub Pull') {
            steps {
                sshagent(['aws_key']) {
                    sh "ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri 'sudo docker pull $imageName:latest'"
                }
            }
        }

        stage('blue-green deploy') {
            steps {
                sshagent(credentials: ['aws_key']) {
                    // 배포 스크립트 실행 권한
                    sh 'chmod +x /home/ubuntu/deploy.sh'

                    // 배포 스크립트 실행
                    sh "ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri '/home/ubuntu/deploy.sh'"
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
