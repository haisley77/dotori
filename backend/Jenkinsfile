pipeline {
    agent any

    environment {
        imageName = "haisley77/dotori-develop-be"
        registryCredential = 'dockerhub-accesstoken'
        dockerImage = ''

        releaseServerAccount = 'ubuntu'
        releaseServerUri = 'dotori.online'
        releasePort = '8081'
    }

    stages {
        stage('Git Clone') {
            steps {
                echo 'Clone...'
                git branch: 'develop-be',
                    credentialsId: 'github-access',
                    url: 'https://github.com/haisley77/dotori.git'
            }
        }
        stage('Jar Build') {
            steps {
                dir ('backend') {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean bootJar'
                    // sh './gradlew build'
                }
            }
        }
        stage('Image Build & DockerHub Push') {
            steps {
                dir('backend') {
                    script {
                        docker.withRegistry('', registryCredential) {
                           // 이미지 빌드
                           sh "docker build -t $imageName:$BUILD_NUMBER ."
                           sh "docker build -t $imageName:latest ."

                           // Docker Hub에 푸시
                           sh "docker push $imageName:$BUILD_NUMBER"
                           sh "docker push $imageName:latest"
                        }
                    }
                }
            }
        }

        stage('DockerHub Pull') {
            steps {
                sshagent(credentials: ['dotori-ssh-key']) {
                    sh "ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri 'sudo docker pull $imageName:latest'"
                }
            }
        }
        stage('Before Service Stop') {
            steps {
                sshagent(credentials: ['dotori-ssh-key']) {
                    sh '''
                    if test "`ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker ps -aq --filter ancestor=$imageName:latest"`"; then
                    ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker stop $(docker ps -aq --filter ancestor=$imageName:latest)"
                    ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker rm -f $(docker ps -aq --filter ancestor=$imageName:latest)"
                    ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker rmi $imageName:latest"
                    fi
                    '''
                }
            }
        }
        stage('Service Start') {
            steps {
                sshagent(credentials: ['dotori-ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "sudo docker run -i -e TZ=Asia/Seoul -e "SPRING_PROFILES_ACTIVE=prod" --name codespeed -p $releasePort:$releasePort -d $imageName:latest"
                    '''
                }
            }
        }

    }
}